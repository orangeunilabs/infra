---
version: "3"

services:
  authentik:
    image: ghcr.io/goauthentik/server:2023.10.5
    networks:
      - proxynet
      - default
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=Host(`auth.orangeunilabs.com`)"
      - "traefik.http.routers.auth.entrypoints=http,https"
      - "traefik.http.routers.auth.middlewares=authentik-https-redirect"
      - "traefik.http.middlewares.authentik-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.auth.service=authentik"
      # Use the static-defined Cloudflare ACME provider
      - "traefik.http.routers.auth.tls=true"
      - "traefik.http.routers.auth.tls.certresolver=cloudflare"
      # Config the service for Authentik
      - "traefik.http.services.authentik.loadbalancer.server.scheme=http"
      - "traefik.http.services.authentik.loadbalancer.server.name=auth"
      - "traefik.http.services.authentik.loadbalancer.server.port=9000"
      - "traefik.http.services.authentik.loadbalancer.passhostheader=true"
      # - "traefik.http.services.server-auth.loadbalancer.healthcheck.port=9000"
      # - "traefik.http.services.server-auth.loadbalancer.healthcheck.path=/-/health/live/"
      # - "traefik.http.services.server-auth.loadbalancer.healthcheck.interval=30s"
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: auth_db
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    env_file:
      - .env
    ports:
      - "9000:9000"
    depends_on:
      - postgresql
      - redis
  postgresql:
    image: docker.io/library/postgres:12-alpine
    container_name: auth_db
    hostname: auth_db
    networks:
      - default
    restart: unless-stopped
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    env_file:
      - .env
  redis:
    image: docker.io/library/redis:alpine
    container_name: auth_redis
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    labels:
      - "traefik.enable=false"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ./data/redis:/data
  worker:
    image: ghcr.io/goauthentik/server:${AUTHENTIK_TAG:-2023.10.4}
    container_name: authentik_worker
    restart: unless-stopped
    labels:
      - "traefik.enable=false"
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - postgresql
      - redis

networks:
  proxynet:
    external: true
